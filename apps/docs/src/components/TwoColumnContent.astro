---
import type { Props as StarlightPageProps } from '../props';
import DocStatusIndicator from './DocStatusIndicator.astro';

// Get page data
const props = Astro.props as StarlightPageProps;
const { entry } = props;

// Get the current file's GitHub history
const currentPath =
  entry?.collection && entry?.slug
    ? `apps/docs/src/content/${entry.collection}/${entry.slug}.mdx`
    : '';
console.log('Current file path:', currentPath);
console.log('Entry data:', entry);

// Function to fetch last commit info for a file
async function getGitHubFileHistory(filePath: string): Promise<
  | {
      author: string;
      avatar?: string;
      date: Date;
      message: string;
      url: string;
    }
  | undefined
> {
  const GITHUB_REPO = import.meta.env.PUBLIC_GITHUB_REPO;
  const GITHUB_BRANCH = import.meta.env.PUBLIC_GITHUB_BRANCH || 'main';

  console.log('GitHub API Config:', {
    repo: GITHUB_REPO,
    branch: GITHUB_BRANCH,
    filePath,
  });

  if (!GITHUB_REPO || !filePath) {
    console.log('Missing required GitHub config:', { GITHUB_REPO, filePath });
    return undefined;
  }

  try {
    const url = `https://api.github.com/repos/${GITHUB_REPO}/commits?path=${filePath}&sha=${GITHUB_BRANCH}&per_page=1`;
    console.log('GitHub API URL:', url);

    const response = await fetch(url);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('GitHub API error:', response.status, errorText);
      return undefined;
    }

    const data = await response.json();
    console.log('GitHub API response:', data);

    const [lastCommit] = data;
    if (!lastCommit) {
      console.log('No commit found for file');
      return undefined;
    }

    return {
      author: lastCommit.commit.author.name,
      avatar: lastCommit.author?.avatar_url,
      date: new Date(lastCommit.commit.author.date),
      message: lastCommit.commit.message,
      url: lastCommit.html_url,
    };
  } catch (error) {
    console.error('Error fetching GitHub history:', error);
    return undefined;
  }
}

const commitInfo = await getGitHubFileHistory(currentPath);
console.log('Final commit info:', commitInfo);

// Format the date
function formatDate(date: Date) {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));

  if (days === 0) return 'today';
  if (days === 1) return 'yesterday';
  if (days < 30) return `${days} days ago`;
  if (days < 365) return `${Math.floor(days / 30)} months ago`;
  return `${Math.floor(days / 365)} years ago`;
}

// Format full date in Cancun timezone
function formatFullDate(date: Date) {
  return date.toLocaleString('en-US', {
    timeZone: 'America/Cancun',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short',
  });
}

// Format compact date in Cancun timezone
function formatCompactDate(date: Date) {
  return date.toLocaleString('en-US', {
    timeZone: 'America/Cancun',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short',
  });
}
---

<div class="lg:sl-flex">
  {
    props.toc && (
      <aside class="right-sidebar-container print:hidden">
        <div class="right-sidebar">
          <div class="p-3">
            <DocStatusIndicator commitInfo={commitInfo} />
          </div>
          <slot name="right-sidebar" />
        </div>
      </aside>
    )
  }
  <div class="main-pane"><slot /></div>
</div>

<style>
  .main-pane {
    isolation: isolate;
  }

  @media (min-width: 72rem) {
    .right-sidebar-container {
      order: 2;
      position: relative;
      width: calc(
        var(--sl-sidebar-width) + (100% - var(--sl-content-width) - var(--sl-sidebar-width)) / 2
      );
    }

    .right-sidebar {
      position: fixed;
      top: 0;
      border-inline-start: 1px solid var(--sl-color-hairline);
      padding-top: var(--sl-nav-height);
      width: 100%;
      height: 100vh;
      overflow-y: auto;
      scrollbar-width: none;
    }

    .main-pane {
      width: 100%;
    }

    :global([data-has-sidebar][data-has-toc]) .main-pane {
      --sl-content-margin-inline: auto 0;

      order: 1;
      width: calc(
        var(--sl-content-width) + (100% - var(--sl-content-width) - var(--sl-sidebar-width)) / 2
      );
    }
  }
</style>
